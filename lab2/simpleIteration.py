import math
import numpy as np


def func(x, choice):
    if choice == 1:
        return x**3 + 2.28 * x**2 - 1.934 * x - 3.908
    if choice == 2:
        return x**3 - x + 4
    if choice == 3:
        return math.sin(x) - math.exp(-x)


def df(x, choice):
    if choice == 1:
        return 3 * x**2 + 4.56 * x - 1.934
    elif choice == 2:
        return 3 * x**2 - 1
    elif choice == 3:
        return math.cos(x) + math.exp(-x)


def getLambda(a, b, choice):
    # xs = [a + (b - a) * i / 1000 for i in range(1001)]
    xs = np.linspace(
        a, b, 100
    )  # –º–æ–∂–Ω–æ –Ω–µ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ 100 –∫—É—Å–∫–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ü—ã –æ—Ç—Ä–µ–∑–∫–∞, –º–Ω–µ –ª–µ–Ω—å + –ø–æ—Ö—É–π –∏—Å–ø—Ä–∞–ª—è—Ç—å
    m = max(abs(df(x, choice)) for x in xs)

    maxx = -100000
    for x in xs:
        if (abs(df(x, choice))) > maxx:
            maxx = abs(df(x, choice))
            print(f"x = {x}")

    print(f"max: {maxx}")
    print(f"df(2) = {df(maxx,choice)}")
    print(f"df(2.1) = {df(2.1,choice)}")

    if m == 0:
        raise ValueError("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –Ω—É–ª–µ–≤–∞—è –Ω–∞ –≤—Å—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.")

    all_positive = all(df(x, choice) >= 0 for x in xs)
    all_negative = all(df(x, choice) <= 0 for x in xs)

    if all_positive:
        lam = -1 / m

    elif all_negative:
        lam = 1 / m
    else:
        avg_sign = 1 if (df(a, choice) + df(b, choice)) >= 0 else -1
        lam = -avg_sign / m
        print("–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –º–µ–Ω—è–µ—Ç –∑–Ω–∞–∫. –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    return lam


def convergenceCondition(a, b, choice):
    lam = getLambda(a, b, choice)
    diffFi = lambda x: 1 + lam * df(x, choice)

    try:
        if abs(diffFi(a)) >= 1 and abs(diffFi(b)):
            print("–£—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
            return False
        else:
            print("–£—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
            return True
    except:
        print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
        return False


def count(a, b, epsilon, choice):
    xi = (a + b) / 2
    i = 1
    lam = getLambda(a, b, choice)

    fi = lambda x, choice: x + lam * func(x, choice)
    diffFi = lambda x, choice: 1 + lam * df(x, choice)

    print(f"–∑–Ω–∞—á–µ–Ω–∏—è ùùã'(a) = {diffFi(a,choice)}, ùùã'(b) = {diffFi(b,choice)} ")
    print(
        "\n|--–ò—Ç–µ—Ä–∞—Ü–∏—è--|-----xi-----|----xi+1-----|---ùùã(xi+1)-----|----f(xi+1)----|--|xi+1 - xi|--|"
    )
    print(
        "|------------|------------|-------------|---------------|--------------|---------------|"
    )

    while True:
        try:
            xi1 = fi(xi, choice)
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}. –ò—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã.")
            return
        fxi1 = func(xi1, choice)
        try:
            fixi1 = fi(xi1, choice)
        except ValueError:
            fixi1 = float("nan")

        print(
            f"| {i:8d}   | {xi:10.5f} |  {xi1:12.5f} | {fixi1:12.5f} | {fxi1:12.5f} | {abs(xi1 - xi):12.5f}  | "
        )

        if abs(fxi1) < epsilon and abs(xi1 - xi) < epsilon:
            print(
                f"–ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å: xi = {xi1:.6f}, f(xi) = {func(xi1, choice):.15f}, –∏—Ç–µ—Ä–∞—Ü–∏–π: {i}"
            )
            break
        i += 1
        if i > 50:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω –ø—Ä–µ–¥–µ–ª –∏—Ç–µ—Ä–∞—Ü–∏–π.")
            break
        xi = xi1


def get_choice():
    while True:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print("1: x^3 + 2.28x^2 - 1.934x - 3.908")
        print("2: x^3 - x + 4")
        print("3: sin(x) - exp(-x)")
        try:
            choice = int(input())
            if choice in (1, 2, 3):
                return choice
            else:
                print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


def get_interval(choice):
    while True:
        print("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ—Ä–Ω—è (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª a b): ")
        try:
            a, b = map(float, input().split())
            if a > b:
                a, b = b, a

            changes = count_roots(a, b, choice)
            if changes == -1:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∑–Ω–∞–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.")
                continue
            if changes == 0:
                print("–ù–∞ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.")
                continue
            if changes >= 2:
                print(
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–π ({changes} –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞). –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª."
                )
                continue

            return a, b
        except ValueError:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


def count_roots(a, b, choice, steps=1000):
    tol = 1e-8
    fa = func(a, choice)
    fb = func(b, choice)

    if abs(fa) < tol or abs(fb) < tol:
        return 1

    xs = np.linspace(a, b, steps)
    values = []
    for x in xs:
        try:
            values.append(func(x, choice))
        except Exception:
            values.append(np.nan)

    sign_changes = 0
    zero_points = 0

    for i in range(len(values)):
        if not np.isnan(values[i]) and abs(values[i]) < tol:
            zero_points += 1

    for i in range(1, len(values)):
        if np.isnan(values[i - 1]) or np.isnan(values[i]):
            continue
        if values[i - 1] * values[i] < 0:
            sign_changes += 1

    return sign_changes + zero_points


choice = get_choice()
a, b = get_interval(choice)
epsilon = float(input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å: "))

if convergenceCondition(a, b, choice):
    count(a, b, epsilon, choice)
else:
    print("–ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π –º–æ–∂–µ—Ç –Ω–µ —Å–æ–π—Ç–∏—Å—å.")
    count(a, b, epsilon, choice)
