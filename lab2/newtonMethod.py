import math
import numpy as np


def func(x, choice):
    if choice == 1:
        return 2.74 * x**3 - 1.93 * x**2 - 15.28 * x - 3.72
    if choice == 2:
        return x**3 - x + 4
    if choice == 3:
        return math.sin(x) - math.exp(-x)


def diffFunc(x, choice):
    if choice == 1:
        return 8.22 * x**2 - 3.86 * x - 15.28
    if choice == 2:
        return 3 * x**2 - 1
    if choice == 3:
        return math.cos(x) + math.exp(-x)


def doubleDiffFunc(x, choice):
    if choice == 1:
        return 16.44 * x - 3.86
    if choice == 2:
        return 6 * x
    if choice == 3:
        return -math.sin(x) - math.exp(-x)


def convergenceCondition(a, b, choice):
    return countRootsForDiff(a, b, choice) == 0 == countRootsForDoubleDiff(a, b, choice)


def xiCount(x, choice):
    return x - (func(x, choice) / diffFunc(x, choice))


def x0Count(a, b, choice):
    x0 = (a + b) / 2
    fa = func(a, choice)
    dda = doubleDiffFunc(a, choice)
    fb = func(b, choice)
    ddb = doubleDiffFunc(b, choice)

    if fa * dda > 0:
        x0 = a
    elif fb * ddb > 0:
        x0 = b

    if func(x0, choice) * doubleDiffFunc(x0, choice) > 0:
        print("ùëì(ùë•0)‚àô ùëì‚Ä≤‚Ä≤(ùë•0) > 0 –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è => –º–µ—Ç–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å")
    else:
        print(
            "ùëì(ùë•0)‚àô ùëì‚Ä≤‚Ä≤(ùë•0) > 0 –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è => –º–µ—Ç–æ–¥ –Ω–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å"
        )
    return x0


def newtonMethod(a, b, epsilon, choice):
    i = 1
    x0 = x0Count(a, b, choice)
    xi = x0

    print(
        "\n|--–ò—Ç–µ—Ä–∞—Ü–∏—è--|-----xi-----|----f(xi)-----|---f'(xi)-----|----x(i+1)----|--|xi+1 - xi|--|"
    )
    print(
        "|------------|------------|--------------|--------------|--------------|---------------|"
    )
    while True:
        fxi = func(xi, choice)
        fdiffxi = diffFunc(xi, choice)
        xi1 = xiCount(xi, choice)

        print(
            f"| {i:8d}   | {xi:10.5f} | {fxi:12.5f} | {fdiffxi:12.5f} | {xi1:12.5f} | {abs(xi1 - xi):12.5f}  | "
        )

        if abs(fxi) < epsilon and abs(xi1 - xi) < epsilon:
            print(
                f"–ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å: xi = {xi1:.6f}, f(xi) = {func(xi1, choice):.15f}, –∏—Ç–µ—Ä–∞—Ü–∏–π: {i}"
            )
            break
        i += 1
        if i > 100:
            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π")
            break

        xi = xi1


def countRoots(a, b, choice, steps=1_000):
    xs = np.linspace(a, b, steps)
    values = []
    for x in xs:
        try:
            values.append(func(x, choice))
        except Exception:
            values.append(np.nan)
    sign_changes = 0
    for i in range(1, len(values)):
        if np.isnan(values[i - 1]) or np.isnan(values[i]):
            continue
        if values[i - 1] * values[i] < 0:
            sign_changes += 1
    return sign_changes


def countRootsForDiff(a, b, choice, steps=1_000):
    xs = np.linspace(a, b, steps)
    values = []
    for x in xs:
        try:
            values.append(diffFunc(x, choice))
        except Exception:
            values.append(np.nan)
    sign_changes = 0
    for i in range(1, len(values)):
        if np.isnan(values[i - 1]) or np.isnan(values[i]):
            continue
        if values[i - 1] * values[i] < 0:
            sign_changes += 1
    return sign_changes


def countRootsForDoubleDiff(a, b, choice, steps=1_000):
    xs = np.linspace(a, b, steps)
    values = []
    for x in xs:
        try:
            values.append(doubleDiffFunc(x, choice))
        except Exception:
            values.append(np.nan)
    sign_changes = 0
    for i in range(1, len(values)):
        if np.isnan(values[i - 1]) or np.isnan(values[i]):
            continue
        if values[i - 1] * values[i] < 0:
            sign_changes += 1
    return sign_changes


def get_interval(choice):
    while True:
        print("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ—Ä–Ω—è (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª a b): ")
        try:
            a, b = map(float, input().split())
            if a > b:
                a, b = b, a
            if choice == 3 and (a < 0 or b < 0):
                print("–î–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è 3 –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
                continue

            changes = countRoots(a, b, choice)
            if changes == -1:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∑–Ω–∞–∫–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ.")
                continue
            if changes == 0:
                print("–ù–∞ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç –∫–æ—Ä–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.")
                continue
            if changes >= 2:
                print(
                    f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–π ({changes} –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–Ω–∞–∫–∞). –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª."
                )
                continue

            return a, b
        except ValueError:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


def get_choice():
    while True:
        print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print("1: 2.74x^3 - 1.93x^2 - 15.28x - 3.72 = 0")
        print("2: x^3 - x + 4 = 0")
        print("3: sin(x) - exp(-x) = 0")
        try:
            choice = int(input())
            if choice in (1, 2, 3):
                return choice
            else:
                print("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


def main():
    choice = get_choice()
    a, b = get_interval(choice)
    epsilon = float(input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç—å Œµ: "))
    if convergenceCondition(a, b, choice):
        print("–£—Å–ª–æ–≤–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, –º–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞ –ø—Ä–∏–º–µ–Ω–∏–º.")
    else:
        print("–£—Å–ª–æ–≤–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è, –º–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–π—Ç–∏—Å—å.")

    newtonMethod(a, b, epsilon, choice)


if __name__ == "__main__":
    main()
